@page "/"
@using System.Timers

<style>

	h2 {
		padding: 5px;
	}

	.row {
		justify-content: center;
	}

	.game {
		width: 400px;
		margin: auto;
		padding: 10px;
	}

	.circularbtn {
		border: none;
		width: 100px;
		height: 100px;
		font-size: 50px;
		border-radius: 200px;
		background-color: #EDE8E8;
	}

	.database {
		width: 800px;
		margin: auto;
		position: center;
		padding: 10px;
	}

	.selected {
		background-color: black;
	}

</style>
<!--- First div to display Animal Database---->
<div class="database">
	<div class="row">
		<h2>Choose 8 animals:</h2>
	</div>
	<div class="row">
		<!--- loop through all animal emojis in the database---->
		@for (var allAnim = 0; allAnim < animalDatabase.Count; allAnim++)
		{
			<!--- create a variable for each Animal in the database List---->
			var uniqueAnimalsToAdd = animalDatabase[allAnim];
			<!--- store the index of each animal in a variable---->
			var uniqueDBIndex = allAnim;

		<div class="col-1">
			<!--- on click, push the clicked animal in the AnimalEmoji list for the game---->
			<!----Tried my best here to add a class for the div that could highlights the chosen animal, but was unable to do so-->
			<button @onclick="@(() => pushAnimalToList(uniqueAnimalsToAdd, uniqueDBIndex))"
					type="button" class="btn">
				<h1>@animalDatabase[allAnim]</h1>
			</button>
		</div>
		}
	</div>
	<div class="row" style="padding:50px">
		<!--- on click, set up the game---->
		<button @onclick="@(() => SetUpGame())"
				type="button" class="btn btn-dark">
			<h4>Create Game</h4>
		</button>
		<button @onclick="@(() => unselectAll())"
				type="button" class="btn btn-link">
			<h5 style="padding:0 0 0 100px">Reset Animals</h5>
		</button>
	</div>
</div>
<!--- Second div to display the Game once SetUpGame is called---->
<div class="game">
	<div class="row">
		<!--- loop through all chosen animals in the new and shuffled list---->
		@for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
		{
			<!--- create a variable for each animal in the list---->
			var animal = shuffledAnimals[animalNumber];
			var uniqueDescription = $"Button #{animalNumber}";
			<!--- store the index of each animal in a variable---->
			var uniqueButtonIndex = animalNumber;

			<div class="col-3">
				<button @onclick="@(() => ButtonClick(animal, uniqueDescription, uniqueButtonIndex))"
						type="button" class="circularbtn">
					<!---display only question marks from the hiddenEmoji list---->
					<h1>@hiddenEmoji[uniqueButtonIndex]</h1>
				</button>
			</div>
		}
	</div>
	<div class="row">
		<h3 style= "padding:20px">Matches: @matchesFound</h3>
		<h3 style= "padding:20px">Score: @scoreDisplay</h3> 
	</div>
	<div class="row" style= "color: #dc3545">
		<h2 >@timeDisplay</h2>
	</div>
</div>

@code {
	/*****for TASK B ✅
	Provide multiple options of animal emoji so the player can choose 
	8 animals and then start the game with them */

	List<string> mainAnimalDatabase = new List<string>() //create a database with 24 options of animal emojis (B)
	{
		"🐶", "🐺",
		"🐱", "🐼",
		"🐻", "🐮",
		"🐯", "🐹",
		"🐷", "🦊",
		"🐗", "🦝",
		"🦎", "🐠",
		"🐰", "🦄",
		"🐜", "🦋",
		"🐌", "🦩",
		"🦜", "🦢",
		"🐥", "🦈",
	};

	protected override void OnInitialized() // when the webpage loads do this
	{
		animalDatabase = mainAnimalDatabase.ToList();
		timer = new Timer(100);
		timer.Elapsed += Timer_Tick;
	}


	//Strings for animals
	List<string> animalDatabase = new List<string>(); // temporary string to store animal database
	List<string> animalEmoji = new List<string>(); //create an empty list of string in which the chosen animals can be pushed (B)


	private void pushAnimalToList(string animalToAdd, int DBIndex) // This function is called everytime the player clicks on a animal(B)
	{
		if (animalEmoji.Count < 16) // player can not choose on more than 8 animals (B)
		{
			animalEmoji.Add(animalToAdd);
			animalEmoji.Add(animalToAdd); // one chosen animal pushed twice to have pairs for the game. (B)
			animalDatabase[DBIndex] = ""; // to make sure the same animal is not clicked twice, the animal is removed on click. (B)
		}
	}

	private void unselectAll() // reset the chosen animals. This was an additional think I added along with Task B to make it replayable. However it has a bug and haven't figure out how to solve it (B)
	{
		animalDatabase.Clear(); // clears the temporary database string.
		animalDatabase = mainAnimalDatabase.ToList(); // fill the temporary database string with animals again
		animalEmoji.Clear();
		shuffledAnimals.Clear();// clear 
		timer.Stop(); // stop the timer
	}


	List<string> shuffledAnimals = new List<string>();

	/****** For TASK C ✅
	Memory Game: The buttons begin with ?. On click button is visible and remains open until the next one is checked.
	If the next button matches, both buttons should stay open for 1 second then emptied out.
	If next button is incorrect, they go back to ?. */

	List<string> hiddenEmoji = new List<string>() // Make a list with ? Emoji. (C)
	{
		"❔", "❔",
		"❔", "❔",
		"❔", "❔",
		"❔", "❔",
		"❔", "❔",
		"❔", "❔",
		"❔", "❔",
		"❔", "❔"
	};

	private void SetUpGame()
	{

		Random random = new Random(); // randomize the positions of all animals on the list.
		shuffledAnimals = animalEmoji
			.OrderBy(item => random.Next())
			.ToList();

		matchesFound = 0; // reset matches to zero (A)

		tenthOfSecondsElapsed = 0; // reset time

		for (var i = 0; i < hiddenEmoji.Count; i++)
		{
			hiddenEmoji[i] = "❔"; // this is to make sure all animals are "❔" when beginning the game. (C)
		}
	}

	/***** 
	*	
	*
	THE MAIN GAME SETUP 
	*
	*
	*****/

	string lastAnimalFound = string.Empty; // variable to keep track of previous animal clicked
	string lastDescription = string.Empty;
	int lastButtonIndex;
	int matchesFound = 0;
	Timer timer;
	int tenthOfSecondsElapsed = 0;
	string timeDisplay;

	/***** for TASK A ✅
	Change the game so that the player scores 10 point for every correct match and loses 2 points for every wrong match
	*****/
	int scoreDisplay = 0; // created to track score of the matches successfully made. (A)

	private void hideAnimalsAgain(int buttonIndex, int lastButtonIndex)
	{
		hiddenEmoji[buttonIndex] = "❔"; //(C)
		hiddenEmoji[lastButtonIndex] = "❔"; //(C)
	}

	private void removeAnimals(int buttonIndex, int lastButtonIndex)
	{

		shuffledAnimals[buttonIndex] = string.Empty;
		shuffledAnimals[lastButtonIndex] = string.Empty;

		hiddenEmoji[buttonIndex] = string.Empty;
		hiddenEmoji[lastButtonIndex] = string.Empty;
	}

	// before this function is called, the buttonHeading is empty. (C)
	private void ButtonClick(string animal, string animalDescription, int buttonIndex)
	{

		if (lastAnimalFound == string.Empty) // first click
		{
			// if lastAnimalFound is " ", then buttonIndex is animal. (C)

			hiddenEmoji[buttonIndex] = animal;

			lastAnimalFound = animal;
			lastDescription = animalDescription;
			lastButtonIndex = buttonIndex;

			timer.Start(); // the timer begins

		}
		else if ((lastAnimalFound == animal) && (animalDescription != lastDescription)) // if second click and it matches the first
		{
			hiddenEmoji[buttonIndex] = animal; // display the animal
			Task.Delay(1000).ContinueWith(t => removeAnimals(buttonIndex, lastButtonIndex)); // After 1 second remove the correct animals. (C)

			lastAnimalFound = string.Empty;

			matchesFound++;
			scoreDisplay = scoreDisplay + 10; // add to the score by 1 on correct match (A)

			if (matchesFound == 8) // if matches found amount to 8, the timer stops and game is reset.
			{
				timer.Stop();
				timeDisplay += " - Good Job!";
				SetUpGame();
			}

		}
		else
		{
			hiddenEmoji[buttonIndex] = animal;
			Task.Delay(1000).ContinueWith(t => hideAnimalsAgain(buttonIndex, lastButtonIndex)); // After 1 second make the buttonName disappear. (C)

			lastAnimalFound = string.Empty;
			//lastButtonIndex = -1;

			if (animalDescription != lastDescription) // this statement is added to make sure the score does not reduce, if the same button is clicked again.
			{
				scoreDisplay = scoreDisplay - 2; // reduce the score by 1 for incorrect match (A)
			}
		}
	}

	private void Timer_Tick(Object source, ElapsedEventArgs e)
	{
		InvokeAsync(() =>
		{
			tenthOfSecondsElapsed++;
			timeDisplay = (tenthOfSecondsElapsed / 10F)
				.ToString("0.0s");
			StateHasChanged();
		});
	}

}

